#modelSavePath: '/home/tumu/anaconda3/envs/stableBaselines/panda-gym/modelhpc'
#logSavePath: '/home/tumu/anaconda3/envs/stableBaselines/panda-gym/loghpc'
#urdfPath: '/home/tumu/anaconda3/envs/stableBaselines/panda-gym/panda_gym/envs/robots/panda.urdf'
modelSavePath: '/scratch/users/tbal21/.conda/envs/stableBaselines/panda-gym/modelhpc'
logSavePath: '/scratch/users/tbal21/.conda/envs/stableBaselines/panda-gym/loghpc'
urdfPath: '/kuacc/users/tbal21/panda_gym/envs/robots/panda.urdf'
expNumber: "12"
curriNumber: "1" 
envName: "PandaReach-v2"             
total_timesteps: !!float 12e6
mode: True                           
algorithm: "PPO"                    
policy: "MultiInputPolicy"           
render: False                        
gamma: 0.95 
n_steps: 2048
batch_size: 8192
learning_rate: 0.0003
n_envs: 4
testSamples: 1000
max_episode_steps: 800
verbose: 1
pseudoI: False
save_freq: !!float 100e6 
sampleJointAnglesGoal: False # If this is false, then you should determine goal_range value
goal_range: 0.4
randomStart: False # If this is false, then you should determine neutral joint angles.. These values are defined in myrobot.py
curriLearning: False  # If this is true, than determine curriNumber
lambdaErr: 20.0
accelerationConstant: 0.005
velocityConstant: 0.0
velocityThreshold: 0.08
thresholdConstant: 0.0

# TODO env = VecNormalize(env, norm_obs=True, norm_reward=True,
                   #clip_obs=10.)

######
#policy_kwargs= dict(
#                    log_std_init=-2,
#                 ortho_init=False,
#                    activation_fn=th.nn.ReLU,
#                    net_arch=dict(pi=[128, 128], vf=[128, 128])
#                  )
